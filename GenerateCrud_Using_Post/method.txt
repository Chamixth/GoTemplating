package controllers

import (
	"MongoDB2/models"
	"context"
	"encoding/json"
	"github.com/labstack/echo"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"net/http"
)

type UserController struct {
	client *mongo.Client
}

func NewUserController(client *mongo.Client) *UserController {
	return &UserController{client}
}

func (uc *UserController) GetUser(c echo.Context) error {
	// Extract the id from the URL
	id := c.Param("id")

	// Convert the id into an object id
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.String(http.StatusBadRequest, "Invalid ID")
	}

	// Access the users collection in the database
	collection := uc.client.Database("{{.DatabaseName}}").Collection("{{.Collection}}")
	u := models.User{}

	// Find the user with the specified id
	err = collection.FindOne(context.TODO(), bson.M{"_id": objID}).Decode(&u)
	if err != nil {
		return c.String(http.StatusNotFound, "User not found")
	}

	// Convert the user object to JSON
	uj, err := json.Marshal(u)
	if err != nil {
		return c.String(http.StatusInternalServerError, "Failed to marshal JSON")
	}

	// Return the JSON response
	return c.JSONBlob(http.StatusOK, uj)
}

func (uc *UserController) CreateUser(c echo.Context) error {
	// Create an empty user object
	u := models.User{}

	// Decode the request body into the user object
	err := c.Bind(&u)
	if err != nil {
		return c.String(http.StatusBadRequest, "Invalid request")
	}

	// Access the users collection in the database
	collection := uc.client.Database("{{.DatabaseName}}").Collection("{{.Collection}}")

	// Insert the user object into the database
	_, err = collection.InsertOne(context.TODO(), u)
	if err != nil {
		return c.String(http.StatusInternalServerError, "Failed to create user")
	}

	// Return the created user
	return c.JSON(http.StatusCreated, u)
}

func (uc *UserController) UpdateUser(c echo.Context) error {
	// Extract the id from the URL
	id := c.Param("id")

	// Convert the id into an object id
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.String(http.StatusBadRequest, "Invalid ID")
	}

	// Create an empty user object
	u := models.User{}

	// Decode the request body into the user object
	err = c.Bind(&u)
	if err != nil {
		return c.String(http.StatusBadRequest, "Invalid request")
	}

	// Access the users collection in the database
	collection := uc.client.Database("{{.DatabaseName}}").Collection("{{.Collection}}")

	// Define the filter to find the user with the specified id
	filter := bson.M{"_id": objID}

	// Define the update operation to set the new user object
	update := bson.M{"$set": u}

	// Update the user with the specified id
	_, err = collection.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		return c.String(http.StatusInternalServerError, "Failed to update user")
	}

	// Return a success message
	return c.String(http.StatusOK, "User updated successfully")
}

func (uc *UserController) DeleteUser(c echo.Context) error {
	// Extract the id from the URL
	id := c.Param("id")

	// Convert the id into an object id
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return c.String(http.StatusBadRequest, "Invalid ID")
	}

	// Access the users collection in the database
	collection := uc.client.Database("{{.DatabaseName}}").Collection("{{.Collection}}")

	// Define the filter to find the user with the specified id
	filter := bson.M{"_id": objID}

	// Delete the user with the specified id
	_, err = collection.DeleteOne(context.TODO(), filter)
	if err != nil {
		return c.String(http.StatusInternalServerError, "Failed to delete user")
	}

	// Return a success message
	return c.String(http.StatusOK, "User deleted successfully")
}
